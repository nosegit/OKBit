{"entries":[{"timestamp":1742804934685,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"namespace OKbit{\n    export function \n\n}"],[1,"\n"]],"start1":0,"start2":0,"length1":40,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"les\": [\n"],[1,"        \"main.blocks\",\n"],[0,"        "]],"start1":151,"start2":151,"length1":16,"length2":39},{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":229,"start2":229,"length1":32,"length2":31}]},{"type":"removed","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"}]},{"timestamp":1742805065649,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ion "],[-1,"test"],[0,"\n\n}"]],"start1":33,"start2":33,"length1":11,"length2":7}]}]},{"timestamp":1742806556598,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"test"],[-1,"(){\n        \n    }"],[0,"\n\n}"]],"start1":37,"start2":37,"length1":25,"length2":7}]}]},{"timestamp":1742806565852,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"it{\n"],[-1,"\n// ----------------------- ADC128S102 -----------------------\n\n    let spi_mosi = 15, spi_miso =  14, spi_sck = 13, spi_cs = 16\n\n    export function AnalogInitial(){\n        pins.spiPins(spi_mosi,spi_miso,spi_sck);\n        pins.spiFormat(8,2);"],[1,"    export function test(){\n        "],[0,"\n   "]],"start1":13,"start2":13,"length1":252,"length2":44}]}]},{"timestamp":1742807159285,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"2);\n"],[-1,"        pins.spiFrequency(16000000);\n    }\n\n    export function AnalogRead(channel : number){\n        let control = pins.createBuffer(8)\n        control[3] = channel&1\n        control[4] = channel\n        control[5] = channel\n        let buffer = 0\n        pins.spi\n        pins.spiTransfer(control,buffer)\n"],[0,"    "]],"start1":258,"start2":258,"length1":315,"length2":8}]}]},{"timestamp":1742807755024,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"umber){\n"],[-1,"\n"],[0,"        "]],"start1":348,"start2":348,"length1":17,"length2":16},{"diffs":[[0,"ns.createBuffer("],[-1,"1"],[1,"8"],[0,")\n        contro"]],"start1":380,"start2":380,"length1":33,"length2":33},{"diffs":[[0,"control["],[-1,"0"],[1,"3"],[0,"] = chan"]],"start1":407,"start2":407,"length1":17,"length2":17},{"diffs":[[0,"nnel"],[-1,"<<3\n"],[1,"&1"],[0,"\n   "]],"start1":423,"start2":423,"length1":12,"length2":10},{"diffs":[[0,"    "],[-1,"pins.digitalWritePin(spi_cs,0)\n\n        let high_buffer = pins.createBuffer(1)"],[1,"control[4] = channel\n        control[5] = channel"],[0,"\n   "]],"start1":434,"start2":434,"length1":86,"length2":57},{"diffs":[[0,"    let "],[-1,"low_"],[0,"buffer ="]],"start1":492,"start2":492,"length1":20,"length2":16},{"diffs":[[0,"r = "],[-1,"pins.createBuffer(1)\n        pins.spiTransfer(control,high_buffer)\n        pins.spiTransfer(null, low_buffer)\n\n        pins.digitalWritePin(spi_cs, 1)\n        return (high_buffer[0]<<8) | low_buffer[0]"],[1,"0\n        pins.spi\n        pins.spiTransfer(control,buffer)"],[0,"\n   "]],"start1":505,"start2":505,"length1":209,"length2":67}]}]},{"timestamp":1742808317680,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"16\n\n"],[-1,"    //block=\"AnalogInitial\"\n"],[0,"    "]],"start1":143,"start2":143,"length1":36,"length2":8},{"diffs":[[0,"al()"],[-1,": void"],[0,"{\n  "]],"start1":178,"start2":178,"length1":14,"length2":8},{"diffs":[[0," }\n\n"],[-1,"    //block=\"AnalogRead $channel\"\n"],[0,"    "]],"start1":302,"start2":302,"length1":42,"length2":8},{"diffs":[[0,"ber)"],[-1,": int16"],[0,"{\n\n "]],"start1":350,"start2":350,"length1":15,"length2":8}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":201,"start2":201,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"}]}],"snapshots":[{"timestamp":1742804934684,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"OKBit\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1742806778375,"editorVersion":"7.0.57","text":{"main.ts":"namespace OKbit{\n    export function AnalogInitial(){\n        pins.spiPins(15,14,13);\n    }\n\n}","README.md":"","pxt.json":"{\n    \"name\": \"OKBit\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1742808581336,"editorVersion":"7.0.57","text":{"main.ts":"namespace OKbit{\n\n// ----------------------- ADC128S102 -----------------------\n\n    let spi_mosi = 15, spi_miso =  14, spi_sck = 13, spi_cs = 16\n\n    export function AnalogInitial(){\n        pins.spiPins(spi_mosi,spi_miso,spi_sck);\n        pins.spiFormat(8,2);\n        pins.spiFrequency(16000000);\n    }\n\n    export function AnalogRead(channel : number){\n\n        let control = pins.createBuffer(1)\n        control[0] = channel<<3\n\n        pins.digitalWritePin(spi_cs,0)\n\n        let high_buffer = pins.createBuffer(1)\n        let low_buffer = pins.createBuffer(1)\n        pins.spiTransfer(control,high_buffer)\n        pins.spiTransfer(null, low_buffer)\n\n        pins.digitalWritePin(spi_cs, 1)\n        return (high_buffer[0]<<8) | low_buffer[0]\n    }\n\n}","README.md":"","pxt.json":"{\n    \"name\": \"OKBit\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1742808722661}